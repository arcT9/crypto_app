Message List
image GCP Install Python packages by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 8:57 PM
image
GCP Install Python packages

image Gcloud Initialization by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 8:58 PM
image
Gcloud Initialization

Profile picture of Melkot, Aaneesh Naagaraj.image Created a Compute Instance with a Doc... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 9:32 PM
image
Created a Compute Instance with a Docker Engine

Profile picture of Melkot, Aaneesh Naagaraj.image Dockerizing the Cashman Flask App by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 10:30 PM
image
Dockerizing the Cashman Flask App

image Successfully built Docker image with ... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 10:31 PM
image
Successfully built Docker image with Cashman Flask App

Profile picture of Melkot, Aaneesh Naagaraj.image Pushing Docker Image to GCloud using ... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 10:50 PM
image
Pushing Docker Image to GCloud using Cloud Build

image GCP Cloud Build complete for Cashman ... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 10:52 PM
image
GCP Cloud Build complete for Cashman Docker Image

image Creating a Cloud Run service to expos... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 10:54 PM
image
Creating a Cloud Run service to expose the Cashman endpoint

image Cashman Dockerized Application succes... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/11/21 10:57 PM
image
Cashman Dockerized Application successfully deployed on GCP using Cloud Build and Cloud Deploy

October 14, 2021
Profile picture of Melkot, Aaneesh Naagaraj.Link https://cse5330.herokuapp.com/ by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/14/21 11:11 AM
https://cse5330.herokuapp.com/

Profile picture of Melkot, Aaneesh Naagaraj.Message by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj10/14/21 11:23 AM
DB1
SQL
CREATE TABLE `employee` (
    `f_name` varchar(255),
    `m_init` varchar(1),
    `l_name` varchar(255),
    `ssn` varchar(9) NOT NULL,
    `b_date` DATETIME,
    `address` varchar(255),
    `city` varchar(255),
    `state` varchar(255),
    `gender` varchar(1),
    `salary` FLOAT,
    `super_ssn` varchar(9),
    `dept_num` varchar(255) NOT NULL,
    PRIMARY KEY (`ssn`)
);
CREATE TABLE `department` (
    `name` varchar(255),
    `number` varchar(255) NOT NULL,
    `mgr_ssn` varchar(9) NOT NULL,
    `mgr_start_date` DATETIME,
    PRIMARY KEY (`number`)
);
CREATE TABLE `dept_locations` (
    `d_location` varchar(255) NOT NULL,
    `d_num` varchar(255) NOT NULL,
    PRIMARY KEY (`d_location`)
);
CREATE TABLE `project` (
    `name` varchar(255) NOT NULL,
    `number` varchar(255) NOT NULL,
    `location` varchar(255),
    `d_num` varchar(255) NOT NULL,
    PRIMARY KEY (`number`)
);
CREATE TABLE `works_on` (
    `e_ssn` varchar(9) NOT NULL,
    `project_num` varchar(255) NOT NULL,
    `hours` FLOAT
);
CREATE TABLE `dependent` (
    `essn` varchar(255) NOT NULL,
    `d_name` varchar(255) NOT NULL,
    `sex` varchar(2) NOT NULL,
    `b_date` DATETIME NOT NULL,
    `relationship` varchar(255) NOT NULL,
    PRIMARY KEY (`d_name`)
);
ALTER TABLE `employee` ADD CONSTRAINT `employee_fk0` FOREIGN KEY (`super_ssn`) REFERENCES `employee`(`ssn`);
ALTER TABLE `employee` ADD CONSTRAINT `employee_fk1` FOREIGN KEY (`dept_num`) REFERENCES `department`(`number`);
ALTER TABLE `department` ADD CONSTRAINT `department_fk0` FOREIGN KEY (`mgr_ssn`) REFERENCES `employee`(`ssn`);
ALTER TABLE `dept_locations` ADD CONSTRAINT `dept_locations_fk0` FOREIGN KEY (`d_num`) REFERENCES `department`(`number`);
ALTER TABLE `project` ADD CONSTRAINT `project_fk0` FOREIGN KEY (`d_num`) REFERENCES `department`(`number`);
ALTER TABLE `works_on` ADD CONSTRAINT `works_on_fk0` FOREIGN KEY (`e_ssn`) REFERENCES `employee`(`ssn`);
ALTER TABLE `works_on` ADD CONSTRAINT `works_on_fk1` FOREIGN KEY (`project_num`) REFERENCES `project`(`number`);
ALTER TABLE `dependent` ADD CONSTRAINT `dependent_fk0` FOREIGN KEY (`essn`) REFERENCES `employee`(`ssn`);
November 7, 2021
Last read
Profile picture of Melkot, Aaneesh Naagaraj.Message by Melkot, Aaneesh Naagaraj, has an attachment.
Melkot, Aaneesh NaagarajSunday 7:39 PM
crypto_app.zip
Today
Profile picture of Melkot, Aaneesh Naagaraj.web: gunicorn app:app --preload by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj6:53 PM
web: gunicorn app:app --preload

COINBASE_TOKEN = 'abd90df5f27a7b170cd775abf... by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj6:55 PM
COINBASE_TOKEN='abd90df5f27a7b170cd775abf89d632b350b7c1c9d53e08b340cd9832ce52c2c'

python-dotenv by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj6:55 PM
python-dotenv

pip install -r requirements.txt by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj6:56 PM
pip install -r requirements.txt

Profile picture of Melkot, Aaneesh Naagaraj.Message by Melkot, Aaneesh Naagaraj
Melkot, Aaneesh Naagaraj7:05 PM
gitignore
Text
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
# C extensions
*.so
# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec
# Installer logs
pip-log.txt
pip-delete-this-directory.txt
# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
# Translations
*.mo
*.pot
# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
# Flask stuff:
instance/
.webassets-cache
# Scrapy stuff:
.scrapy
# Sphinx documentation
docs/_build/
# PyBuilder
target/
# Jupyter Notebook
.ipynb_checkpoints
# IPython
profile_default/
ipython_config.py
# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version
# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock
# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/
# Celery stuff
celerybeat-schedule
celerybeat.pid
# SageMath parsed files
*.sage.py
# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
# Spyder project settings
.spyderproject
.spyproject
# Rope project settings
.ropeproject
# mkdocs documentation
/site
# mypy
.mypy_cache/
.dmypy.json
dmypy.json
# Pyre type checker
.pyre/
# pytype static type analyzer
.pytype/
.vscode/
.vs/
*.ipynb
# *.csv
*.xlsx